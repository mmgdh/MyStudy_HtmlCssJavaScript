@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    <script>
        function A() {
            let p = Promise.resolve(7);
            setTimeout(console.log, 0, p === Promise.resolve(p));//true
            setTimeout(console.log, 0, p === Promise.resolve(Promise.resolve(p)));//true

            function onResolved(id) {
                setTimeout(console.log, 0, id, 'resolved');
            }
            function onRejected(id) {
                setTimeout(console.log, 0, id, 'rejected');
            }
            let p1 = new Promise((resolve, reject) => setTimeout(resolve, 3000));
            let p2 = new Promise((resolve, reject) => setTimeout(reject, 3000));
            p1.then(() => onResolved('p1'), () => onRejected('p1'));
            p2.then(() => onResolved('p2'), () => onRejected('p2'));
        }
        A();
        function T_resolve() {
            console.log("-----------------------T_resolve----------------------")
            let p1 = Promise.resolve('foo');
            //若调用then()时不传处理程序，则原样向后传
            let p2 = p1.then();
            //这些都一样(Promise<resolved>: undefined)
            let p3 = p1.then(() => undefined);
            let p4 = p1.then(() => { });
            let p5 = p1.then(() => Promise.resolve());
            //这些都一样(Promise<resolved>: bar)
            let p6 = p1.then(() => 'bar');
            let p7 = p1.then(() => Promise.resolve('bar'));
            //Promise.resolve()保留返回的期约
            let p8 = p1.then(() => new Promise(() => { }));
            let p9 = p1.then(() => Promise.reject());
            let p10 = p1.then(() => { throw 'baz'; });
            let p11 = p1.then(() => Error('qux'));
            setTimeout(console.log, 0, p2);//Promise<resolved>: foo
            setTimeout(console.log, 0, p3);//Promise<resolved>: undefined
            setTimeout(console.log, 0, p4);//Promise<resolved>: undefined
            setTimeout(console.log, 0, p5);//Promise<resolved>: undefined
            setTimeout(console.log, 0, p6);//Promise<resolved>: bar
            setTimeout(console.log, 0, p7);//Promise<resolved>: bar
            setTimeout(console.log, 0, p8);//Promise<pending>
            setTimeout(console.log, 0, p9);//Promise<rejected>:undefined
            setTimeout(console.log, 0, p10);//Promise<rejected>:baz
            setTimeout(console.log, 0, p11);//Promise<rejected>:Error:qux
        }
        function T_reject() {
            console.log("-----------------------T_reject----------------------")
            let p1 = Promise.reject('foo');
            //若调用then()时不传处理程序，则原样向后传
            let p2 = p1.then();
            //这些都一样(Promise<resolved>: undefined)
            let p3 = p1.then(() => undefined);
            let p4 = p1.then(() => { });
            let p5 = p1.then(() => Promise.resolve());
            //这些都一样(Promise<resolved>: bar)
            let p6 = p1.then(() => 'bar');
            let p7 = p1.then(() => Promise.resolve('bar'));
            //Promise.resolve()保留返回的期约
            let p8 = p1.then(() => new Promise(() => { }));
            let p9 = p1.then(() => Promise.reject());
            let p10 = p1.then(() => { throw 'baz'; });
            let p11 = p1.then(() => Error('qux'));
            setTimeout(console.log, 0, p2);//Promise<rejected>: foo
            setTimeout(console.log, 0, p3);//Promise<resolved>: undefined
            setTimeout(console.log, 0, p4);//Promise<resolved>: undefined
            setTimeout(console.log, 0, p5);//Promise<resolved>: undefined
            setTimeout(console.log, 0, p6);//Promise<resolved>: bar
            setTimeout(console.log, 0, p7);//Promise<resolved>: bar
            setTimeout(console.log, 0, p8);//Promise<pending>
            setTimeout(console.log, 0, p9);//Promise<rejected>:undefined
            setTimeout(console.log, 0, p10);//Promise<rejected>:baz
            setTimeout(console.log, 0, p11);//Promise<resolved>:Error:qux
        }
        T_resolve();
        T_reject();


    </script>
}
