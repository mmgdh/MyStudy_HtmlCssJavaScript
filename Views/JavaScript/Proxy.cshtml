@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    <script>
        const target = {
            foo: 'bar'
        };
        const handler = {
            get() {
                return 'handler override';
            }
        };
        const proxy = new Proxy(target, handler);
        console.log(target.foo);
        console.log(proxy.foo);
        console.log(target['foo']);
        console.log(proxy['foo']);
        console.log(Object.create(target)['foo']);
        console.log(Object.create(proxy)['foo']);
        console.log("------------------------9.1.3捕获器参数和反射API-----------------------");
        const handle2 = {
            get(trapTarget, property, receiver) {//get()捕获器会接收到目标对象、要查询的属性和代理对象三个参数
                console.log(trapTarget === target);
                console.log(property);
                console.log(receiver === proxy2);
            }
        };
        const proxy2 = new Proxy(target, handle2);
        proxy2.foo;
        const handle3 = {
            get(trapTarget, Property, receiver) {
                return trapTarget[Property];//重建被捕获的原始方法
            }
        };
        const proxy3 = new Proxy(target, handle3);
        console.log(proxy3.foo);
        console.log(target.foo);

        const handler4 = {
            get(trapTarget, property, receiver) {//捕获属性进行修饰再返回
                let decoration = '';
                if (property === 'foo') {
                    decoration = '!!!';
                }
                return Reflect.get(...arguments) + decoration;
            }
        };
        const proxy4 = new Proxy(target, handler4);
        console.log(proxy4.foo);//bar!!!
        console.log(target.foo);//bar
        console.log("------------------------可撤销代理-----------------------");
        var target2 = {
            foo: 'bar2'
        };
        const handler5 = {
            get() {
                return 'intercepted';
            }
        };
        const { proxy: proxy5, revoke: revoke } = Proxy.revocable(target2, handler5);
        console.log(proxy5);
        console.log(target2.foo);
        console.log(proxy5.foo);
        revoke();
        //console.log(proxy7.foo);//TypeError
        console.log("------------------------代理另一个代理-----------------------");
        const firstProxy = new Proxy(target, {
            get() {
                console.log('first proxy');
                return Reflect.get(...arguments);
            }
        });
        const secondProxy = new Proxy(firstProxy, {
            get() {
                console.log('second proxy');
                return Reflect.get(...arguments);
            }
        });
        console.log(secondProxy.foo);
        console.log("------------------------代理捕获器与反射方法-----------------------");
        //get()、set()、has()、defineProperty()、getOwnPropertyDescriptor()、deleteProperty()、ownKeys()、getPrototypeOf()、setPrototypeOf()、isExtensible()、preventExtensions()、apply()、construct()
        console.log("------------------------9.3.1 跟踪属性访问-----------------------");
        const user = {
            name: 'Jake'
        };
        const proxy6 = new Proxy(user, {
            get(target, property, receiver) {
                console.log(`Getting${property}`);
                return Reflect.get(...arguments);
            },
            set(target, property, value, receiver) {
                console.log(`Setting ${property}=${value}`);
                return Reflect.set(...arguments);
            }
        });
        proxy6.name;//Getting name
        proxy6.age = 27;//Setting age=27
        console.log("------------------------9.3.2 隐藏属性-----------------------");
        const hiddenProperties = ['foo', 'bar'];
        const targetObject = { foo: 1, bar: 2, baz: 3 };
        const proxy7 = new Proxy(targetObject, {
            get(target, property) {
                if (hiddenProperties.includes(property)) {
                    return undefined;
                }
                else {
                    return Reflect.get(...arguments);
                }
            },
            has(target, property) {
                if (hiddenProperties.includes(property)) {
                    return false;
                }
                else {
                    return Reflect.has(...arguments);
                }
            }
        });
        console.log(proxy7.foo);//undefined
        console.log('foo' in proxy7);//undefined
        console.log("------------------------9.3.3 属性验证-----------------------");
        const target5 = {
            onlyNumbersGoHere: 0
        };
        const proxy8 = new Proxy(target5, {
            set(target, property, value) {
                if (typeof value !== 'number') {
                    return false;
                }
                else {
                    return Reflect.set(...arguments);
                }
            }
        });
        proxy8.onlyNumbersGoHere = 1;//成功
        console.log(proxy8.onlyNumbersGoHere);
        proxy8.onlyNumbersGoHere = "2";//失败
        console.log("------------------------9.3.4函数参数验证----------------------");
        function median(...nums) {
            console.log(Math.floor(nums.length / 2));
            return nums.sort()[Math.floor(nums.length / 2)];
        }
        const proxy9 = new Proxy(median, {
            apply(target, thisArg, argumentsList) {
                for (const arg of argumentsList) {
                    if (typeof arg !== 'number') {
                        throw 'Error:提供非数字参数';
                    }
                }
                return Reflect.apply(...arguments);
            }
        });
        console.log(proxy9(4, 7, 1));//4
        //console.log(proxy(4, '7', 1)); Error
        console.log("------------------------9.3.4构造函数参数验证----------------------");
        class UserClass {
            constructor(id) {
                this._id = id;
            }
        }
        const proxy77 = new Proxy(UserClass, {
            construct(target, argumentsList, newTarget) {
                if (target, arguments, argumentsList, newTarget) {
                    if (argumentsList[0] === undefined) {
                        throw 'User cannot be instantiated without id';
                    } else {
                        return Reflect.construct(...arguments);
                    }
                }
            }
        });
        new proxy77(1);
        //new proxy();//Throw Error
        console.log("------------------------9.3.5数据绑定与可观察对象----------------------");
        const userList = [];
        class User {
            constructor(name) {
                this._name = name;
            }
        }
        const proxy88 = new Proxy(User, {
            construct() {
                const newUser = Reflect.construct(...arguments);
                userList.push(newUser);
                return newUser;
            }
        });
        new proxy88('John');
        new proxy88('Jacob');
        new proxy88('MMGDH');
        console.log(userList);

        const userList2 = [];
        function emit(newValue) {
            console.log(newValue);
        }
        const proxy99 = new Proxy(userList2, {
            set(target, property, value, receiver) {
                const result = Reflect.set(...arguments);
                if (result) {
                    emit(Reflect.get(target, property, receiver));
                }
                return result;
            }
        });
        proxy99.push('John');
        proxy99.push('Jacob');

    </script>
}
