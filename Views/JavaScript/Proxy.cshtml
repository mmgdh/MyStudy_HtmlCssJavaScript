@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    <script>
        const target = {
            foo: 'bar'
        };
        const handler = {
            get() {
                return 'handler override';
            }
        };
        const proxy = new Proxy(target, handler);
        console.log(target.foo);
        console.log(proxy.foo);
        console.log(target['foo']);
        console.log(proxy['foo']);
        console.log(Object.create(target)['foo']);
        console.log(Object.create(proxy)['foo']);

        const handle2 = {
            get(trapTarget, property, receiver) {//get()捕获器会接收到目标对象、要查询的属性和代理对象三个参数
                console.log(trapTarget === target);
                console.log(property);
                console.log(receiver === proxy);
            }
        };
        const proxy2 = new Proxy(target, handle2);
        proxy2.foo;
        const handle3 = {
            get(trapTarget, Property, receiver) {
                return trapTarget[Property];//重建被捕获的原始方法
            }
        };
        const proxy3 = new Proxy(target, handle3);
        console.log(proxy.foo);
        console.log(target.foo);

        const handler4 = {
            get(trapTarget, property, receiver) {//捕获属性进行修饰再返回
                let decoration = '';
                if (property === 'foo') {
                    decoration = '!!!';
                }
                return Reflect.get(...arguments) + decoration;
            }
        };
        const proxy4 = new Proxy(target, handler4);
        console.log(proxy.foo);
        console.log(target.foo);
        console.log("------------------------可撤销代理-----------------------");
        const handler5 = {
            get() {
                return 'intercepted';
            }
        };
        const { proxy, revoke } = Proxy.revocable(target, handler5);
        console.log(proxy.foo);
        console.log(target.foo);
        revoke();
        console.log(proxy.foo);
        console.log("------------------------代理另一个代理-----------------------");
        const firstProxy = new Proxy(target, {
            get() {
                console.log('first proxy');
                return Reflect.get(...arguments);
            }
        });
        const secondProxy = new proxy(firstProxy, {
            get() {
                console.log('second proxy');
                return Reflect.get(...arguments);
            }
        });
        console.log(secondProxy.foo);
    </script>
}
