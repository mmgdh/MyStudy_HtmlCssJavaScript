@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    <script>
        console.log(Array.from("Matt"));
        const m = new Map().set(1, 2).set(3, 4);
        const s = new Set().add(1).add(2).add(3).add(4);
        console.log(Array.from(m));
        console.log(Array.from(s));
        const a1 = [1, 2, 3, 4];
        const a2 = Array.from(a1);
        console.log(a1);
        console.log(a2);
        console.log(a1 === a2);
        const iter = {
            *[Symbol.iterator]() {
                yield 1;
                yield 2;
                yield 3;
                yield 4;
            }
        };
        console.log(Array.from(iter));
        function getArgsArray() {
            return Array.from(arguments);
        }
        console.log(getArgsArray(1, 2, 3, 4));
        const arrayLikeObject = {
            0: 1,
            1: 2,
            2: 3,
            3: 4,
            length: 4
        };
        console.log(Array.from(arrayLikeObject));
        console.log(Array.from(a1, x => x ** 2));
        console.log("-------------------ArrayOf--------------------")
        const of1 = Array.of(1, 2, 3, 7);
        console.log(of1);
        console.log(Array.from(of1));
        console.log("-------------------Array迭代器方法--------------------")
        const a = ["a", "b", "c", "d"];
        const aKeys = Array.from(a.keys());
        const aValues = Array.from(a.values());
        const aEntries = Array.from(a.entries());
        console.log(aKeys);
        console.log(aValues);
        console.log(aEntries);
        for (const [idx, element] of a.entries()) {
            console.log(idx + "___" + element);
        }
        console.log("-------------------Array复制和填充方法--------------------")
        const Zeroes = [0, 0, 0, 0, 0];
        Zeroes.fill(7, 1, 3);//用7填充索引大于等于1且小于3的元素
        let ints, reset = () => ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        reset();
        ints.copyWithin(4, 0, 3);
        console.log(ints);
        console.log("-------------------Array栈方法--------------------")
        let colors = new Array();
        let count1 = colors.push("red", "green");
        console.log(count1);
        let item = colors.pop();
        console.log(item);
        console.log("-------------------Array队列方法--------------------")
        let item2 = colors.shift();
        console.log(item2);
        let count2 = colors.unshift("AAAA");//推入
        console.log(colors.pop());
        console.log("-------------------Array排序方法--------------------")
        let values1 = [1, 2, 3, 4, 5];
        values1.reverse();
        console.log(values1);//反转
        let values2 = [0, 1, 5, 10, 15];
        values2.sort((a, b) => a < b ? 1 : a > b ? -1 : 0);
        console.log(values2);
        console.log("-------------------Array操作方法--------------------")
        let ColorConcat = ["red", "green", "blue"];
        let ColorConcat2 = ColorConcat.concat("yellow", ["black", "brown"]);
        console.log(ColorConcat);//原始数组不变
        console.log(ColorConcat2);
        let SliceArray = ColorConcat2.slice(1);
        let SliceArray2 = ColorConcat2.slice(1, 4);//不包含结束索引
        console.log(SliceArray);
        console.log(SliceArray2);
        let SpliceArray = ["red", "green", "blue"];
        let removed = SpliceArray.splice(0, 1);//删除第一行
        console.log(removed);
        console.log(SpliceArray);
        removed = SpliceArray.splice(1, 1, "red", "purple");//删除一个，插入两个
        console.log(SpliceArray);
        removed = SpliceArray.splice(1, 2, "red", "purple");//删除两个，插入两个
        console.log(removed);
        console.log("-------------------Array搜索和位置方法--------------------")
        let IndexNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];
        console.log(IndexNumber.indexOf(4, 1));
        console.log(IndexNumber.lastIndexOf(4, 1));
        console.log(IndexNumber.includes(4));
        console.log(IndexNumber.find((a, b, c) => a == 3));
        console.log(IndexNumber.findIndex((a, b, c) => b == 5));
        IndexNumber.find((element, index, array) => {
            console.log(element + "____" + index + "____");
            console.log(array);
            return element === 4;
        })
        console.log("-------------------Array迭代方法--------------------")
        console.log(IndexNumber.some((a, b, c) => a > 2));
        console.log(IndexNumber.every((a, b, c) => a > 2));
        console.log(IndexNumber.filter((a, b, c) => a >2));
        console.log(IndexNumber.map((a, b, c) => a * 2));
        IndexNumber.forEach((a, b, c) => console.log(a + "---foreach"));
        console.log("-------------------Array归并方法--------------------")
        let ReduceArray = [1, 2, 3, 4, 5];
        let sum = ReduceArray.reduce((prev, cur, index, array) => prev + cur);
        console.log(sum);//15
        let sum2 = ReduceArray.reduceRight((prev, cur, index, array) => prev + cur);
    </script>
}
